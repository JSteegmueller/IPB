#ifndef _App_Base_h_   // Version 2 (13. Maerz 2016)
#define _App_Base_h_
#include "Klassennamen.h"
#include "ChatterPin.h"  // Wegen TRIGGER_DN, TRIGGER_UP, TRIGGER_ANY
#define MAX_ANZAHL_TIMERS    10
#define MAX_ANZAHL_PINS      14

//#define INCLUDE_USB_TCP

class App_Base
{
public:  
    // Interrupts
    ///////////////////////////////////////////////
    virtual void appEvent(int idEvent) = 0; // Wird von APP_Base aufgerufen, wenn ein Event passiert
    void stopTimerInterrupt(unsigned char interruptID);
    unsigned char setTimerInterrupt(unsigned long int mikroSec, unsigned int nEvents = 0); // Timer stoppt nach n Events; n=0 --> Timer stoppt nie
    void resetTimerInterrupt(unsigned char interruptID, unsigned long int mikroSec, unsigned int nEvents = 0); //Setzt den Timer erneut, ohne einen neuen Timer zu erzeugen.
    void stopPinInterrupt(unsigned char interruptID);
    unsigned char setPinInterrupt( unsigned char pin,
                                   unsigned char pinmode,             // OUTPOT, INPUT, INPUT_PULLUP
                                   unsigned char trigger_UpDnAny,     // TRIGGER_DN TRIGGER_UP TRIGGER_ANY
                                   bool          useHardwareInterrupt = false,
                                   unsigned long sperrzeitMikroSec    = 5000,
                                   unsigned char n                    = 10,
                                   unsigned char outOfm               = 12);

    // Digital Services
    ///////////////////////////////////////////////
    static void setHalfbyte(unsigned char firstPin, unsigned char bitmuster, bool setPinModeOutput=true);
    static void setByte(unsigned char firstPin, unsigned char bitmuster, bool setPinModeOutput=true);

    // Signale zum debuggen ausgeben (Alles blocking Calls)
    ///////////////////////////////////////////////
    static void   slowpulse(int pin); // heller-heller-heller-aus
    static void   blinkXTimes(unsigned char pin, unsigned char xTimes); // xTimes mal ein-aus 
    static void   swapLight(unsigned char pin = 13); // ein - aus - ein - aus - ...
    void          setHeartBeatPin(unsigned char pin);  // Disables Heartbeat if Pin = 0
    void          setError(unsigned char errorID); // Veraendert den Heartbeat: alle HEARTBEATERRORMILLIS blinkt er so oft wie errorID angibt. Siehe Errorcodes.h
    unsigned char getError(){return theErrorID;}; // Liefert den ersten Fehler der auftrat. (Weitere Fehler werden immer verworfen.)

    // Board-ID: Bestimmte Digitalpins auslesen
    ///////////////////////////////////////////////
    static unsigned char getBoardID(unsigned char lsb_pin, unsigned char numberOfPins); // Ab lsb_pin die n�chsten numberOfPins als Bitmuster auslesen
    static unsigned char getBoardID(); // Die zuvor gelesene ID nochmal abrufen aber nicht neu lesen.

    // Event-Handling
    ///////////////////////////////////////////////
    static unsigned char createNewEvent(); // Liefert eine eindeutige Event-ID. Darf vom Anwender aufgerufen werden.
    void event(int idEvent);  

    // USB-Kommunikation ... mit "#define INCLUDE_USB_TCP" einschalten
    ///////////////////////////////////////////////
    ByteBuffer* receiveBuffer_USB_TCP;
    unsigned char eventReceiveUSB;  // Wenn dieses appEvent ausgelöst wird, dann stehen Empfangsdaten in receiveBuffer_USB_TCP bereit.

///////////////////////////////////////////////
// Ab hier keine Befehle mehr fuer den Anwender
///////////////////////////////////////////////
  public:
    App_Base(); // Dieser Konstruktor MUSS in cpp-Datei implementiert werden, sonst Absturz des Compilers!

    // Anbindung: App an Arduino
    void setup();
    void loop();

  private:
    // Klassenattribute
    ArduinoTimer*        dieArduinoTimer [MAX_ANZAHL_TIMERS];
    ChatterPin*          diePinInterrupts[MAX_ANZAHL_PINS  ];
    static unsigned char anzahlErzeugterEvents;

    // Optionale USB-Implamentierung
    TCPCOM_Arduino* myTCPCOM_Arduino;

    // Anbindung: App_-Implamentierung
    virtual void appSetup() = 0; //Erst hier sind Arduino-Befehle moeglich!
    virtual void appLoop()  = 0; //Wird immer aufgerufen, wenn es nichts zu tun gibt. (Arduino_mini_Pro_15MHz: ca. 15000 mal pro sec)

    // Board-ID
    static unsigned char boardID;

    // Heartbeat und Errorhandling (siehe errorcodes.h)
    static unsigned char pinHeartbeat;
    unsigned char        eventHeartbeatTimer;
    unsigned char        theErrorID;

    // Fuer die Hardware-Interrupts:
    static App_Base*     dieAppMitPininterruptHandler; // Für globale Interrupt-Funktion attachInterruptFunctionHandler()
    static void          attachInterruptFunctionHandler();
    static unsigned char attachInterruptFunctionHandler_PinInterruptID;
    unsigned char        hardwareInterruptID_Pin2;
    unsigned char        hardwareInterruptID_Pin3;
};

#endif

