#include "Thread.h"
#include <windows.h>
#include "SystemAPI.h"
#include "ITGEventHandler.h"

// #define _LOG_THREADS_

#ifdef _LOG_THREADS_
#include "Monitoring\Log.h"
#endif

//http://msdn.microsoft.com/en-us/library/windows/desktop/ms685100%28v=vs.85%29.aspx
int procesClassThreadPriorityBasePriority [42][3] =
{
{IDLE_PRIORITY_CLASS        , THREAD_PRIORITY_IDLE,          1 },  //1
{IDLE_PRIORITY_CLASS        , THREAD_PRIORITY_LOWEST,        2 },  //2
{IDLE_PRIORITY_CLASS        , THREAD_PRIORITY_BELOW_NORMAL,  3 },  //3
{IDLE_PRIORITY_CLASS        , THREAD_PRIORITY_NORMAL,        4 },  //4
{IDLE_PRIORITY_CLASS        , THREAD_PRIORITY_ABOVE_NORMAL,  5 },  //5
{IDLE_PRIORITY_CLASS        , THREAD_PRIORITY_HIGHEST,       6 },  //6
{IDLE_PRIORITY_CLASS        , THREAD_PRIORITY_TIME_CRITICAL, 15},  //7
{BELOW_NORMAL_PRIORITY_CLASS, THREAD_PRIORITY_IDLE,          1 },  //8
{BELOW_NORMAL_PRIORITY_CLASS, THREAD_PRIORITY_LOWEST,        4 },  //9
{BELOW_NORMAL_PRIORITY_CLASS, THREAD_PRIORITY_BELOW_NORMAL,  5 },  //10
{BELOW_NORMAL_PRIORITY_CLASS, THREAD_PRIORITY_NORMAL,        6 },  //11
{BELOW_NORMAL_PRIORITY_CLASS, THREAD_PRIORITY_ABOVE_NORMAL,  7 },  //12
{BELOW_NORMAL_PRIORITY_CLASS, THREAD_PRIORITY_HIGHEST,       8 },  //13
{BELOW_NORMAL_PRIORITY_CLASS, THREAD_PRIORITY_TIME_CRITICAL, 15},  //14
{NORMAL_PRIORITY_CLASS,       THREAD_PRIORITY_IDLE,          1 },  //15
{NORMAL_PRIORITY_CLASS,       THREAD_PRIORITY_LOWEST,        6 },  //16
{NORMAL_PRIORITY_CLASS,       THREAD_PRIORITY_BELOW_NORMAL,  7 },  //17
{NORMAL_PRIORITY_CLASS,       THREAD_PRIORITY_NORMAL,        8 },  //18
{NORMAL_PRIORITY_CLASS,       THREAD_PRIORITY_ABOVE_NORMAL,  9 },  //19
{NORMAL_PRIORITY_CLASS,       THREAD_PRIORITY_HIGHEST,       10},  //20
{NORMAL_PRIORITY_CLASS,       THREAD_PRIORITY_TIME_CRITICAL, 15},  //21
{ABOVE_NORMAL_PRIORITY_CLASS, THREAD_PRIORITY_IDLE,          1 },  //22
{ABOVE_NORMAL_PRIORITY_CLASS, THREAD_PRIORITY_LOWEST,        8 },  //23
{ABOVE_NORMAL_PRIORITY_CLASS, THREAD_PRIORITY_BELOW_NORMAL,  9 },  //24
{ABOVE_NORMAL_PRIORITY_CLASS, THREAD_PRIORITY_NORMAL,        10},  //25
{ABOVE_NORMAL_PRIORITY_CLASS, THREAD_PRIORITY_ABOVE_NORMAL,  11},  //26
{ABOVE_NORMAL_PRIORITY_CLASS, THREAD_PRIORITY_HIGHEST,       12},  //27
{ABOVE_NORMAL_PRIORITY_CLASS, THREAD_PRIORITY_TIME_CRITICAL, 15},  //28
{HIGH_PRIORITY_CLASS,         THREAD_PRIORITY_IDLE,          1 },  //29
{HIGH_PRIORITY_CLASS,         THREAD_PRIORITY_LOWEST,        11},  //30
{HIGH_PRIORITY_CLASS,         THREAD_PRIORITY_BELOW_NORMAL,  12},  //31
{HIGH_PRIORITY_CLASS,         THREAD_PRIORITY_NORMAL,        13},  //32
{HIGH_PRIORITY_CLASS,         THREAD_PRIORITY_ABOVE_NORMAL,  14},  //33
{HIGH_PRIORITY_CLASS,         THREAD_PRIORITY_HIGHEST,       15},  //34
{HIGH_PRIORITY_CLASS,         THREAD_PRIORITY_TIME_CRITICAL, 15},  //35
{REALTIME_PRIORITY_CLASS,     THREAD_PRIORITY_IDLE,          16},  //36
{REALTIME_PRIORITY_CLASS,     THREAD_PRIORITY_LOWEST,        22},  //37
{REALTIME_PRIORITY_CLASS,     THREAD_PRIORITY_BELOW_NORMAL,  23},  //38
{REALTIME_PRIORITY_CLASS,     THREAD_PRIORITY_NORMAL,        24},  //39
{REALTIME_PRIORITY_CLASS,     THREAD_PRIORITY_ABOVE_NORMAL,  25},  //40
{REALTIME_PRIORITY_CLASS,     THREAD_PRIORITY_HIGHEST,       26},  //41
{REALTIME_PRIORITY_CLASS,     THREAD_PRIORITY_TIME_CRITICAL, 31}   //42
};


#ifdef _LOG_THREADS_
// Nur in diesem Modul definiert
static void out(TGString EX, TGString s)
{
   Log::out(S_+EX+": Thread::("+SystemAPI::threadGetCurrentID() +") " +s);
}
#endif

Thread::Thread()
{
   #ifdef _LOG_THREADS_
   out("E", "Thread()");
   #endif

   lastError[0] = 0;
   threadForkedHandle = 0;
   threadRunParameter = 0;
   threadIsForked = false;
   threadIsSuspended = false;
   derITGEventHandlerNewRun = 0;

   #ifdef _LOG_THREADS_
   out("X", "Thread()");
   #endif
}

void Thread::forkNewRun(void* runParameter, bool createSuspended, bool allowRefork)
{
   #ifdef _LOG_THREADS_
   out("E", "threadForkNewRun(void* runParameter)");
   #endif

   if (allowRefork)
   {
      exit();
      exitAndFreeStructure();
      waitFinished(200);
   }
   else
   {
      if (threadIsForked) throw "Thread is forked twice.";
      if (chekExists()) throw "Thread is forked twice but already terminated.";
   }

   threadIsForked = true;
   threadIsSuspended = createSuspended;

   this->threadRunParameter = runParameter;

   SECURITY_ATTRIBUTES securityAttributes;
   {
      securityAttributes.nLength = sizeof(SECURITY_ATTRIBUTES);
      securityAttributes.lpSecurityDescriptor = 0;
      securityAttributes.bInheritHandle = false;
   }

   DWORD creationsFlags;
   if (createSuspended)
   {
      creationsFlags = CREATE_SUSPENDED;
   }
   else
   {
      creationsFlags = 0; // start running
   }

   lastError[0] = 0;
   threadForkedHandle = CreateThread( &securityAttributes,
                                      0, // initialThreadStackSizeInBytes,
                                      (LPTHREAD_START_ROUTINE)threadForkMethod,
                                      this,
                                      creationsFlags,
                                      0);  //no threadId

   #ifdef _LOG_THREADS_
   out("", S_ + "threadForkedHandle = " + threadForkedHandle);
   out("X", "threadForkNewRun(void* runParameter)");
   #endif
}

//static
void Thread::threadForkMethod(void* param)
{
   #ifdef _LOG_THREADS_
   out("E", "threadForkMethod(void* param)");
   #endif

   Thread* thisInstance = (Thread*)param; // Notwendig, weil diese Methode statisch ist!

   try
   {
      if (thisInstance->derITGEventHandlerNewRun == 0)
      {
         thisInstance->newRun(thisInstance->threadRunParameter);
      }
      else
      {
         thisInstance->derITGEventHandlerNewRun->onEvent(ITGEH_EVENT_THREAD_FORKED, thisInstance, "Thread", thisInstance->threadRunParameter);
      }
   }
   catch(char* text)
   {
      // Sicherstellen dass Errorlength kleiner Buffer
      int length = strlen(text);
      if (length > MAX_THREAD_ERROR_STRLEN-1) length = MAX_THREAD_ERROR_STRLEN-1;
      memcpy(thisInstance->lastError, text, length);
      thisInstance->lastError[length]=0;
   }
   catch(...)
   {
      strcpy(thisInstance->lastError, "Unknown system error");
   }

   thisInstance->threadIsForked = false;

   #ifdef _LOG_THREADS_
   out("X", "threadForkMethod(void* param) ..-> threadExitAndFreeStructure(0)");
   #endif

   SystemAPI::threadExitAndFreeStructure(0/*this thread*/); // Handleobjekt deallokieren
   // Hier ist der Thread bereits beendet.
};

Thread::~Thread()
{
   #ifdef _LOG_THREADS_
   out("E", "~Thread()");
   out("X", "~Thread()");
   #endif

   // spätestens hier ist Schluss!
   SystemAPI::threadExitAndFreeStructure(threadForkedHandle);
}

bool Thread::waitFinished(int waitTimeoutMilliSec)
{
   #ifdef _LOG_THREADS_
   out("E", "threadForkedWaitFinished(int waitTimeoutMilliSec)");
   #endif

   long int endTime = SystemAPI::getMsSinceSystemstart() + waitTimeoutMilliSec;
   while(SystemAPI::threadChekExists(threadForkedHandle))
   {
      if (endTime > SystemAPI::getMsSinceSystemstart())
      {
         #ifdef __LOG__
         out("X", "threadForkedWaitFinished(..):false");
         #endif
         return false;
      }
   }

   threadIsForked = false;

   #ifdef _LOG_THREADS_
   out("X", "threadForkedWaitFinished(..):true");
   #endif
   return true;
}

void Thread::exitAndFreeStructure()
{
   #ifdef _LOG_THREADS_
   out("E", "threadForkedExitAndFreeStructure()");
   out("", S_+"threadForkedHandle:" + threadForkedHandle);
   #endif

   try
   {
      SystemAPI::threadExitAndFreeStructure(threadForkedHandle);
   }
   catch(...){}

   threadForkedHandle = 0;
   threadIsForked = 0;

   #ifdef _LOG_THREADS_
   out("X", "threadForkedExitAndFreeStructure()");
   #endif
}

void Thread::exit()
{
   ::TerminateThread(threadForkedHandle, 0); // Handle darf 0 sein  :)
}

void Thread::sleepMilliSec(int ms)
{
   ::Sleep(ms);
}

void Thread::suspend()
{
   if (threadIsSuspended) return;  // Nicht mehrmals!
   threadIsSuspended = true;
   ::SuspendThread(threadForkedHandle); // increments suspendcounter (--> scheduler ..)
}

void Thread::resume()
{
   threadIsSuspended = false;
   ::ResumeThread(threadForkedHandle); // decrements suspendcounter (--> scheduler ..)
}

int Thread::setPriority_1_31(int priority_1_31, bool toForkedThread)
{
   int processPrioClass;
   int threadPrioLevel;
   if (priority_1_31 <= 1)      // Base Priority = 1
   {
      processPrioClass = IDLE_PRIORITY_CLASS;
      threadPrioLevel = THREAD_PRIORITY_IDLE;
   }
   else if (priority_1_31 <= 2) // Base Priority = 2
   {
      processPrioClass = IDLE_PRIORITY_CLASS;
      threadPrioLevel = THREAD_PRIORITY_LOWEST;
   }
   else if (priority_1_31 <= 3) // Base Priority = 3
   {
      processPrioClass = IDLE_PRIORITY_CLASS;
      threadPrioLevel = THREAD_PRIORITY_BELOW_NORMAL;
   }
   else if (priority_1_31 <= 4) // Base Priority = 4
   {
      processPrioClass = IDLE_PRIORITY_CLASS;
      threadPrioLevel = THREAD_PRIORITY_NORMAL;
   }
   else if (priority_1_31 <= 5) // Base Priority = 5
   {
      processPrioClass = IDLE_PRIORITY_CLASS;
      threadPrioLevel = THREAD_PRIORITY_ABOVE_NORMAL;
   }
   else if (priority_1_31 <= 6) // Base Priority = 6
   {
      processPrioClass = IDLE_PRIORITY_CLASS;
      threadPrioLevel = THREAD_PRIORITY_HIGHEST;
   }
   else if (priority_1_31 <= 7) // Base Priority = 7
   {
      processPrioClass = BELOW_NORMAL_PRIORITY_CLASS;
      threadPrioLevel = THREAD_PRIORITY_ABOVE_NORMAL;
   }
   else if (priority_1_31 <= 8) // Base Priority = 8
   {
      processPrioClass = NORMAL_PRIORITY_CLASS;
      threadPrioLevel = THREAD_PRIORITY_NORMAL;
   }
   else if (priority_1_31 <= 9) // Base Priority = 9
   {
      processPrioClass = NORMAL_PRIORITY_CLASS;
      threadPrioLevel = THREAD_PRIORITY_ABOVE_NORMAL;
   }
   else if (priority_1_31 <= 10) // Base Priority = 10
   {
      processPrioClass = NORMAL_PRIORITY_CLASS;
      threadPrioLevel = THREAD_PRIORITY_HIGHEST;
   }
   else if (priority_1_31 <= 11) // Base Priority = 11
   {
      processPrioClass = ABOVE_NORMAL_PRIORITY_CLASS;
      threadPrioLevel = THREAD_PRIORITY_ABOVE_NORMAL;
   }
   else if (priority_1_31 <= 12) // Base Priority = 12
   {
      processPrioClass = ABOVE_NORMAL_PRIORITY_CLASS;
      threadPrioLevel = THREAD_PRIORITY_HIGHEST;
   }
   else if (priority_1_31 <= 13) // Base Priority = 13
   {
      processPrioClass = HIGH_PRIORITY_CLASS;
      threadPrioLevel = THREAD_PRIORITY_NORMAL;
   }
   else if (priority_1_31 <= 14) // Base Priority = 14
   {
      processPrioClass = HIGH_PRIORITY_CLASS;
      threadPrioLevel = THREAD_PRIORITY_ABOVE_NORMAL;
   }
   else if (priority_1_31 <= 15) // Base Priority = 15
   {
      processPrioClass = HIGH_PRIORITY_CLASS;
      threadPrioLevel = THREAD_PRIORITY_HIGHEST;
   }
   else if (priority_1_31 <= 16) // Base Priority = 16
   {
      processPrioClass = REALTIME_PRIORITY_CLASS;
      threadPrioLevel = THREAD_PRIORITY_IDLE;
   }
   else if (priority_1_31 <= 22) // Base Priority = 22
   {
      processPrioClass = REALTIME_PRIORITY_CLASS;
      threadPrioLevel = THREAD_PRIORITY_LOWEST;
   }
   else if (priority_1_31 <= 23) // Base Priority = 23
   {
      processPrioClass = REALTIME_PRIORITY_CLASS;
      threadPrioLevel = THREAD_PRIORITY_BELOW_NORMAL;
   }
   else if (priority_1_31 <= 24) // Base Priority = 24
   {
      processPrioClass = REALTIME_PRIORITY_CLASS;
      threadPrioLevel = THREAD_PRIORITY_NORMAL;
   }
   else if (priority_1_31 <= 25) // Base Priority = 25
   {
      processPrioClass = REALTIME_PRIORITY_CLASS;
      threadPrioLevel = THREAD_PRIORITY_ABOVE_NORMAL;
   }
   else if (priority_1_31 <= 30) // Base Priority = 26   // 31 nur setzen wenn auch 31 gefordert wird.
   {
      processPrioClass = REALTIME_PRIORITY_CLASS;
      threadPrioLevel = THREAD_PRIORITY_HIGHEST	;
   }
   else
   {
      processPrioClass = REALTIME_PRIORITY_CLASS;
      threadPrioLevel = THREAD_PRIORITY_TIME_CRITICAL;
   }

   if ((threadForkedHandle!=0)&&(toForkedThread==true))
   {
      int err1 = ::SetThreadPriority(threadForkedHandle,  threadPrioLevel);
      int err2 = ::SetPriorityClass (GetCurrentProcess(), processPrioClass);

      if ((err1>0)||(err2>0))
      {
         return -1;
      }
   }
   else if (toForkedThread==false) // The this method calling thread
   {
      int err1 = ::SetThreadPriority(SystemAPI::threadGetCurrentThreadHandle(),  threadPrioLevel);
      int err2 = ::SetPriorityClass (GetCurrentProcess(), processPrioClass);

      if ((err1>0)||(err2>0))
      {
         return -1;
      }
   }

   return 0;
}

int Thread::getPriority_1_31(bool ofForkedThread)
{
   int threadRriority;
   if (ofForkedThread)
   {
      threadRriority = ::GetThreadPriority(threadForkedHandle);
   }
   else
   {
      threadRriority = ::GetThreadPriority(SystemAPI::threadGetCurrentThreadHandle());
   }

   int processClass   = ::GetPriorityClass(GetCurrentProcess());

   if (threadRriority == THREAD_PRIORITY_ERROR_RETURN)
   {
      return -1;
   }
   else
   {
      for (int i=0; i<42; i+=7)
      {
         if (procesClassThreadPriorityBasePriority[i][0] == processClass)
         {
            int pos = i;
            for (;i<pos+7; i++)
            {
               if (procesClassThreadPriorityBasePriority[i][1] == threadRriority)
               {
                  return procesClassThreadPriorityBasePriority[i][2];
               }
            }
         }
      }

      return -1; // Suche hat nix gefunden :(
   }
}

bool Thread::chekExists()
{
   #ifdef _LOG_THREADS_
   out("E", "threadChekIsRunning()");
   #endif

   bool result = SystemAPI::threadChekExists(threadForkedHandle);

   #ifdef _LOG_THREADS_
   out("X", S_ + "threadChekIsRunning():" + result);
   #endif
   return result;
}

bool Thread::chekSuspended()
{
   return threadIsSuspended;
}

